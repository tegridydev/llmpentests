Creating Missing Directories and Files
python
Copy code
import os

# Create missing directories
os.makedirs('./static', exist_ok=True)
os.makedirs('./templates', exist_ok=True)

# Create a test database file
db_path = './static/database.db'
if not os.path.exists(db_path):
    conn = sqlite3.connect(db_path)
    conn.close()
Updated Script to Run After Creating Missing Directories and Files
python
Copy code
import os
import sqlite3

# Define test directories and files
test_directories = [
    "/tmp",
    "/var/tmp",
    "./static",
    "./templates"
]

test_files = [
    "/tmp/test_file.txt",
    "/var/tmp/test_file.txt",
    "./static/test_file.txt",
    "./templates/test_file.txt"
]

# Function to test write permissions
def test_write_permissions(directories, files):
    results = {}

    for directory in directories:
        try:
            test_file_path = os.path.join(directory, "test_file.txt")
            # Create file
            with open(test_file_path, "w") as f:
                f.write("This is a test file.")
            results[directory] = "Write: Success"
            
            # Update file
            with open(test_file_path, "a") as f:
                f.write(" Appending some data.")
            results[directory] += ", Update: Success"
            
            # Delete file
            os.remove(test_file_path)
            results[directory] += ", Delete: Success"
        except Exception as e:
            results[directory] = f"Failed: {str(e)}"

    for file in files:
        try:
            # Create file
            with open(file, "w") as f:
                f.write("This is a test file.")
            results[file] = "Write: Success"
            
            # Update file
            with open(file, "a") as f:
                f.write(" Appending some data.")
            results[file] += ", Update: Success"
            
            # Delete file
            os.remove(file)
            results[file] += ", Delete: Success"
        except Exception as e:
            results[file] = f"Failed: {str(e)}"
    
    return results

# Function to test database file access
def test_db_access(db_path):
    results = {}
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Create table
        cursor.execute("CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY, data TEXT)")
        results["Create Table"] = "Success"
        
        # Insert data
        cursor.execute("INSERT INTO test (data) VALUES ('Test data')")
        conn.commit()
        results["Insert Data"] = "Success"
        
        # Update data
        cursor.execute("UPDATE test SET data='Updated data' WHERE id=1")
        conn.commit()
        results["Update Data"] = "Success"
        
        # Delete data
        cursor.execute("DELETE FROM test WHERE id=1")
        conn.commit()
        results["Delete Data"] = "Success"
        
        # Drop table
        cursor.execute("DROP TABLE test")
        conn.commit()
        results["Drop Table"] = "Success"
        
        conn.close()
    except Exception as e:
        results["DB Access"] = f"Failed: {str(e)}"
    
    return results

# Ensure directories and files exist
os.makedirs('./static', exist_ok=True)
os.makedirs('./templates', exist_ok=True)

db_path = './static/database.db'
if not os.path.exists(db_path):
    conn = sqlite3.connect(db_path)
    conn.close()

# Test write permissions
write_permission_results = test_write_permissions(test_directories, test_files)

# Test database access
db_test_files = ["./static/database.db"]
db_access_results = {}
for db_file in db_test_files:
    db_access_results[db_file] = test_db_access(db_file)

# Prepare the output
output = "Write Permissions Check:\n"
for location, result in write_permission_results.items():
    output += f"Location: {location}\nResult: {result}\n\n"

output += "Database Access Check:\n"
for db_file, result in db_access_results.items():
    output += f"Database File: {db_file}\n"
    for operation, status in result.items():
        output += f"{operation}: {status}\n"
    output += "\n"

print(output)
